// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	models "crud-go/pkg/cars/models"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CarDelete provides a mock function with given fields: id
func (_m *Store) CarDelete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CarsCreate provides a mock function with given fields: car
func (_m *Store) CarsCreate(car *models.Car) error {
	ret := _m.Called(car)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Car) error); ok {
		r0 = rf(car)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCarByID provides a mock function with given fields: id
func (_m *Store) GetCarByID(id string) (*models.Car, error) {
	ret := _m.Called(id)

	var r0 *models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Car, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Car); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCars provides a mock function with given fields:
func (_m *Store) GetCars() ([]models.Car, error) {
	ret := _m.Called()

	var r0 []models.Car
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Car, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Car); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Car)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCarByID provides a mock function with given fields: car
func (_m *Store) UpdateCarByID(car *models.Car) error {
	ret := _m.Called(car)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Car) error); ok {
		r0 = rf(car)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
